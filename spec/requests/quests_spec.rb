require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/quests", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Quest. As you add validations to Quest, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      title: "Complete Academy Quest",
      description: "Complete Ruby on Raisl project in Academy Quest",
      complete: false
    }
  }

  let(:invalid_attributes) {
    {
      title: nil,
      description: nil,
      complete: false
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Quest.create! valid_attributes
      get quests_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      quest = Quest.create! valid_attributes
      get quest_url(quest)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_quest_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      quest = Quest.create! valid_attributes
      get edit_quest_url(quest)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Quest" do
        expect {
          post quests_url, params: { quest: valid_attributes }
        }.to change(Quest, :count).by(1)
      end

      it "render a new quest with Turbo stream" do
        post quests_url, params: { quest: valid_attributes }, headers: { "ACCEPT" => "text/vnd.turbo-stream.html" }
        expect(response).to have_http_status(:ok)
        expect(response.body).to include("turbo-stream action=\"prepend\"")
      end

      it "redirects to the index page after created quest" do
        post quests_url, params: { quest: valid_attributes }
        expect(response).to redirect_to(quests_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Quest" do
        expect {
          post quests_url, params: { quest: invalid_attributes }
        }.to change(Quest, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post quests_url, params: { quest: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "renders form with errors using Turbo Stream when quest creation fails" do
        post quests_url, params: { quest: invalid_attributes }, headers: { "ACCEPT" => "text/vnd.turbo-stream.html" }

        # expect(response).to have_http_status(:unprocessable_entity)
        expect(response.media_type).to eq("text/vnd.turbo-stream.html")
        expect(response.body).to include('<turbo-stream action="replace" target="new_quest">')
        expect(response.body).to include("error") # ถ้า form มี error message
      end
    end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       {
  #         title: "Complete Extra",
  #         description: "Complete Extra test after Academy quest",
  #         complete: false
  #       }
  #     }

  #     it "updates the requested quest" do
  #       quest = Quest.create! valid_attributes
  #       patch quest_url(quest), params: { quest: new_attributes }
  #       quest.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "redirects to the index after edit quest" do
  #       quest = Quest.create! valid_attributes
  #       patch quest_url(quest), params: { quest: new_attributes }
  #       quest.reload
  #       expect(response).to redirect_to(quests_url)
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a response with 422 status (i.e. to display the 'edit' template)" do
  #       quest = Quest.create! valid_attributes
  #       patch quest_url(quest), params: { quest: invalid_attributes }
  #       expect(response).to have_http_status(:unprocessable_entity)
  #     end
  #   end
  # end

  describe "DELETE /destroy" do
    it "destroys the requested quest" do
      quest = Quest.create! valid_attributes
      expect {
        delete quest_url(quest)
      }.to change(Quest, :count).by(-1)
    end

    it "redirects to the quests list" do
      quest = Quest.create! valid_attributes
      delete quest_url(quest)
      expect(response).to redirect_to(quests_url)
    end
  end

  describe "Toggle complete" do
    it "toggles complete status and responds with turbo stream" do
        quest = Quest.create! valid_attributes
        patch toggle_complete_quest_path(quest), headers: { "ACCEPT" => "text/vnd.turbo-stream.html" }

        expect(response).to have_http_status(:ok)
        expect(response.media_type).to eq("text/vnd.turbo-stream.html")
        expect(response.body).to include("turbo-stream")
        expect(quest.reload.complete).to eq(true)
      end
  end
  

end